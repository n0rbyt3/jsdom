"use strict";
const fs = require("fs");
const parse = require("url").parse;
const fetch = require("node-fetch");
const caseless = require("caseless");
const toughCookie = require("tough-cookie");
const AbortController = require("abort-controller");
const https = require("https");
const http = require("http");
const HttpProxyAgent = require("http-proxy-agent");
const HttpsProxyAgent = require("https-proxy-agent");
const dataURLFromRecord = require("data-urls").fromURLRecord;
const packageVersion = require("../../../../package.json").version;
const IS_BROWSER = Object.prototype.toString.call(process) !== "[object process]";
const globalJar = new toughCookie.CookieJar();

module.exports = class ResourceLoader {
  constructor({
    strictSSL = true,
    proxy = undefined,
    userAgent = `Mozilla/5.0 (${process.platform || "unknown OS"}) AppleWebKit/537.36 ` +
                `(KHTML, like Gecko) jsdom/${packageVersion}`
  } = {}) {
    this._strictSSL = strictSSL;
    this._proxy = proxy;
    this._userAgent = userAgent;
  }

  _readDataURL(urlRecord) {
    const dataURL = dataURLFromRecord(urlRecord);
    let timeoutId;
    const promise = new Promise(resolve => {
      timeoutId = setTimeout(resolve, 0, dataURL.body);
    });
    promise.abort = () => {
      if (timeoutId !== undefined) {
        clearTimeout(timeoutId);
      }
    };
    return promise;
  }

  _readFile(filePath) {
    let readableStream;
    let abort; // Native Promises doesn't have an "abort" method.

    /*
     * Creating a promise for two reason:
     *   1. fetch always return a promise.
     *   2. We need to add an abort handler.
    */
    const promise = new Promise((resolve, reject) => {
      readableStream = fs.createReadStream(filePath);
      let data = Buffer.alloc(0);

      abort = reject;

      readableStream.on("error", reject);

      readableStream.on("data", chunk => {
        data = Buffer.concat([data, chunk]);
      });

      readableStream.on("end", () => {
        resolve(data);
      });
    });

    promise.abort = () => {
      readableStream.destroy();
      const error = new Error("request canceled by user");
      error.isAbortError = true;
      abort(error);
    };

    return promise;
  }

  _getAgent(protocol) {
    const agentOpts = { keepAlive: true, rejectUnauthorized: this._strictSSL };
    if (this._proxy) {
      agentOpts.rejectUnauthorized = this._strictSSL;
      const proxyOpts = { ...parse(this._proxy), ...agentOpts };
      return protocol === "https:" ? new HttpsProxyAgent(proxyOpts) : new HttpProxyAgent(proxyOpts);
    }
    return protocol === "https:" ? new https.Agent(agentOpts) : new http.Agent(agentOpts);
  }

  _getRequestOptions(uri, { cookieJar, referrer, accept = "*/*" }) {
    const requestOptions = {
      headers: {
        "User-Agent": this._userAgent,
        "Accept-Language": "en",
        "Accept-Encoding": "gzip,deflate",
        "Accept": accept
      }
    }

    const jar = cookieJar || globalJar;
    jar.getCookies(uri.href, (err, cookies) => {
      if (cookies.length > 0) {
        requestOptions.headers["Cookie"] = cookies.join("; ");
      }
    });

    if (referrer && !IS_BROWSER) {
      requestOptions.headers["Referer"] = referrer;
    }

    if (!IS_BROWSER) {
      requestOptions.agent = this._getAgent(uri.protocol);
    }

    return requestOptions;
  }

  _request(requestOptions) {

  }

  fetch(urlString, options = {}) {
    const uri = parse(urlString);

    if (!uri) {
      return Promise.reject(new Error(`Tried to fetch invalid URL ${urlString}`));
    }

    switch (uri.protocol) {
      case "data:": {
        return this._readDataURL(url);
      }

      case "http:":
      case "https:": {
        const requestOptions = this._getRequestOptions(options);
        return request(urlString, requestOptions);
      }

      case "file": {
        // TODO: Improve the URL => file algorithm. See https://github.com/jsdom/jsdom/pull/2279#discussion_r199977987
        const filePath = urlString
          .replace(/^file:\/\//, "")
          .replace(/^\/([a-z]):\//i, "$1:/")
          .replace(/%20/g, " ");

        return this._readFile(filePath);
      }

      default: {
        return Promise.reject(new Error(`Tried to fetch URL ${urlString} with invalid scheme ${url.scheme}`));
      }
    }
  }
};
